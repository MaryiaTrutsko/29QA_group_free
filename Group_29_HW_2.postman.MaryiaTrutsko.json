{
	"info": {
		"_postman_id": "ae9f9631-6b78-49a8-906e-1f595cefc05a",
		"name": "Group_29_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "2_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let resp_1 = pm.response.json();\r",
							"// 4. Спарсить request.\r",
							"let req_1 = pm.request.url.query.all()\r",
							"\r",
							"let resp_name1 = resp_1.name\r",
							"let resp_age1 = resp_1.age\r",
							"let resp_salary1 = resp_1.salary\r",
							"\r",
							"let req_name1 = req_1[0].value\r",
							"let req_age1 = req_1[1].value\r",
							"let req_salary1 = +req_1[2].value\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Test name\", function () {\r",
							"      pm.expect(resp_name1).to.eql(req_name1);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Test age\", function () {\r",
							"      pm.expect(resp_age1).to.eql(+req_age1);\r",
							"});\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req_1.salary)\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(resp_1.salary)\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(resp_1.salary[0])\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_1.salary[1])\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(resp_1.salary[2])\r",
							"\r",
							"\r",
							"// // 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test salary_0\", function () {\r",
							"    pm.expect(resp_1.salary[0]).to.eql(req_salary1);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Test salary_1\", function () {\r",
							"    pm.expect(+(resp_1.salary[1])).to.eql(+(req_salary1*2));\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Test salary_2\", function () {\r",
							"    pm.expect(+(resp_1.salary[2])).to.eql(+(req_salary1*3));\r",
							"});\r",
							"// 15. Создать в окружении переменную name environments - new - variable  \r",
							"// 16. Создать в окружении переменную age environments - new - variable\r",
							"// 17. Создать в окружении переменную salary environments - new - variable\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", req_name1)\r",
							"// // 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", req_age1)\r",
							"// // 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", req_salary1)\r",
							"// // 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"resp_1.salary.forEach(function(s){\r",
							"       console.log(s);\r",
							"   });\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Malena&age=24&salary=2400",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Malena"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "2400"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/first\r",
							"\r",
							"// 1. Отправить запрос.\r",
							"\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "2_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resp = pm.response.json()\r",
							"// 4. Спарсить request.\r",
							"let req = pm.request.url.query.all()\r",
							"\r",
							"let resp_n = resp.name\r",
							"let resp_a = resp.age\r",
							"let resp_s = resp.salary\r",
							"\r",
							"let req_n = req[0].value\r",
							"let req_a = req[1].value\r",
							"let req_s = +req[2].value\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Your test name\", function () {\r",
							"    pm.expect(resp_n).to.eql(req_n);\r",
							"});\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Your test age\", function () {\r",
							"    pm.expect(resp_a).to.eql(req_a);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Your test salary\", function () {\r",
							"    pm.expect(resp_s).to.eql(req_s);\r",
							"});\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(resp.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check_dogName\", () => {\r",
							"  pm.expect(resp.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check_dogAge\", () => {\r",
							"  pm.expect(resp.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check_dogL\", () => {\r",
							"  pm.expect(resp.family.pets.dog.name).to.have.eql(\"Luky\");\r",
							"});\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check_dogAge4\", () => {\r",
							"  pm.expect(resp.family.pets.dog.age).to.have.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Malena&age=24&salary=2400",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Malena"
						},
						{
							"key": "age",
							"value": "24"
						},
						{
							"key": "salary",
							"value": "2400"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "2_5",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// body - formdata - value -{{salary}}\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// body - formdata - value -{{age}}\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// body - formdata - value -{{name}}\r",
							"// 4. Отправить запрос. save - send\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let resp_2 = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req_2 = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check_SqS\", () => {\r",
							"  pm.expect(resp_2).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check_qS_6\", () => {\r",
							"  pm.expect(resp_2).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check_qS_12\", () => {\r",
							"  pm.expect(resp_2).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check_qS_1_5\", () => {\r",
							"  pm.expect(resp_2).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check_qS_3_5\", () => {\r",
							"  pm.expect(resp_2).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check_person\", () => {\r",
							"  pm.expect(resp_2).to.have.property(\"person\");\r",
							"});\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test start_qa_salary\", function () {\r",
							"    pm.expect(resp_2.start_qa_salary).to.eql(+req_2.salary);\r",
							"});\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Test start_qa_salary\", function () {\r",
							"    pm.expect(resp_2.start_qa_salary).to.eql(+req_2.salary);\r",
							"});\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Test qa_salary_after_12_months\", function () {\r",
							"    pm.expect(resp_2.qa_salary_after_12_months).to.eql(+req_2.salary*2.7);\r",
							"});\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(resp_2[\"qa_salary_after_1.5_year\"]).to.eql(+req_2.salary*3.3);\r",
							"});\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(resp_2[\"qa_salary_after_3.5_years\"]).to.eql(+req_2.salary*3.8);\r",
							"});\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test u_name\", function () {\r",
							"    pm.expect(resp_2.person.u_name[1]).to.eql(+req_2.salary);\r",
							"});\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Test u_age\", function () {\r",
							"    pm.expect(resp_2.person.u_age).to.eql(+req_2.age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Test u_salary_5_years\", function () {\r",
							"    pm.expect(resp_2.person.u_salary_5_years).to.eql(+req_2.salary*4.2);\r",
							"});\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let list_person = pm.response.json().person\r",
							"for (key in list_person) {\r",
							"  console.log(`${key} = ${list_person[key]}`);\r",
							"}\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		},
		{
			"name": "2_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_3\r",
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = JSON.parse(responseBody)\r",
							"\r",
							"//  let jsonData = pm.response.json();\r",
							" console.log(\"jsonData = \", jsonData)\r",
							"\r",
							"// // 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							" let name_resp = jsonData.name\r",
							"pm.test(\"name_check\", function () {\r",
							"      pm.expect(jsonData.name).to.eql(\"Malena\");\r",
							"});\r",
							" console.log(\"name_resp = \",  name_resp)\r",
							"// // 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							" let age_resp = jsonData.age\r",
							" pm.test(\"age_check\", function () {\r",
							"      pm.expect(jsonData.age).to.eql(\"23\");\r",
							"});\r",
							" console.log(\"age_resp = \", age_resp)\r",
							"\r",
							"// // 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let salary_resp = jsonData.salary\r",
							" pm.test(\"salary_check\", function () {\r",
							"      pm.expect(jsonData.salary).to.eql(2400);\r",
							"});\r",
							" console.log(\"salary_resp = \", salary_resp)\r",
							"\r",
							"// // 7. Спарсить request.\r",
							"let req = request.data\r",
							"// // 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"name_check1\", function () {\r",
							"      pm.expect(jsonData.name).to.eql(req.name);\r",
							"});\r",
							"// // 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							" pm.test(\"age_check1\", function () {\r",
							"      pm.expect(jsonData.age).to.eql(req.age);\r",
							"});\r",
							"// // 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"//  pm.test(\"salary_check1\", function () {\r",
							"//       pm.expect(jsonData.salary).to.eql(+req.salary);\r",
							"// });\r",
							"let salary_check1 = jsonData.salary\r",
							"let salary1 = Number(req.salary)\r",
							"pm.test(\"check salary\", function () {\r",
							"\t pm.expect(salary1).to.eql(salary_check1)\r",
							"\t\t\t\t\t\t\t});\r",
							"\r",
							"// // 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"// // 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let salary_check_1_5 = jsonData.salary * 4\r",
							"let salary_1_5 = jsonData.family.u_salary_1_5_year\r",
							"console.log(salary_check_1_5)\r",
							"console.log(salary_1_5)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Malena",
							"type": "default"
						},
						{
							"key": "age",
							"value": "23",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "2400",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		}
	]
}